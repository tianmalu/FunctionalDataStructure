theory Submission
  imports Defs
begin

fun oddsum :: "nat \<Rightarrow> nat"  where
  "oddsum _ = 0"

value "oddsum 3 = 5 + 3 + 1 + 0"
value "oddsum 7 = 49"
value "oddsum 1 = 1"

lemma oddsum_is_square: "oddsum n = n * n"
  sorry

lemma oddsum_mult: "oddsum (n*m) = oddsum n * oddsum m"
  sorry

fun spread :: "'a \<Rightarrow> 'a list \<Rightarrow> 'a list"  where
  "spread _ _ = []"

value "spread (0::nat) [1,2,3] = [1,0,2,0,3,0]"

lemma count_spread: "count (spread a xs) a = count xs a + length xs"
  sorry

lemma spread_reverse_snoc: "snoc (reverse (spread a xs)) a = a # spread a (reverse xs)"
  sorry

end
